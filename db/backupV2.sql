-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.adr_registry
(
    adr_id serial NOT NULL,
    med_id integer NOT NULL,
    patient_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    reported_at timestamp without time zone NOT NULL,
    severity text COLLATE pg_catalog."default",
    outcome text COLLATE pg_catalog."default",
    reporter_id integer,
    notes text COLLATE pg_catalog."default",
    symptoms text COLLATE pg_catalog."default",
    CONSTRAINT adr_registry_pkey PRIMARY KEY (adr_id)
);

CREATE TABLE IF NOT EXISTS public.allergy_registry
(
    allr_id serial NOT NULL,
    med_id integer NOT NULL,
    patient_id integer NOT NULL,
    symptoms text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    severity serivity_type NOT NULL DEFAULT 'mild'::serivity_type,
    reported_at timestamp without time zone,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    CONSTRAINT allergy_registry_pkey PRIMARY KEY (allr_id)
);

CREATE TABLE IF NOT EXISTS public.error_medication
(
    err_med_id serial NOT NULL,
    "time" timestamp without time zone NOT NULL,
    patient_id integer NOT NULL,
    doctor_id integer NOT NULL,
    med_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    resolved boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    med_sid integer,
    CONSTRAINT error_medication_pkey PRIMARY KEY (err_med_id)
);

CREATE TABLE IF NOT EXISTS public.expired_medicines
(
    expired_med_id serial NOT NULL,
    med_sid integer NOT NULL,
    med_id integer NOT NULL,
    status character varying(50) COLLATE pg_catalog."default" DEFAULT 'disposed'::character varying,
    moved_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT expired_medicines_pkey PRIMARY KEY (expired_med_id)
);

CREATE TABLE IF NOT EXISTS public.med_cut_off_period
(
    med_period_id serial NOT NULL,
    period_day integer NOT NULL,
    period_month integer NOT NULL,
    period_time_h integer NOT NULL,
    period_time_m integer NOT NULL,
    sub_warehouse_id integer NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone,
    CONSTRAINT med_cut_off_period_pkey PRIMARY KEY (med_period_id)
);

CREATE TABLE IF NOT EXISTS public.med_delivery
(
    delivery_id serial NOT NULL,
    patient_id integer NOT NULL,
    delivery_date timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    delivery_method text COLLATE pg_catalog."default" NOT NULL,
    receiver_name text COLLATE pg_catalog."default" NOT NULL,
    receiver_phone text COLLATE pg_catalog."default" NOT NULL,
    address text COLLATE pg_catalog."default" NOT NULL,
    note text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" DEFAULT 'Pending'::text,
    medicine_list jsonb,
    doctor_id integer NOT NULL DEFAULT 10,
    CONSTRAINT med_delivery_pkey PRIMARY KEY (delivery_id)
);

CREATE TABLE IF NOT EXISTS public.med_evaluation
(
    me_id serial NOT NULL,
    med_id integer NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT med_evaluation_pkey PRIMARY KEY (me_id)
);

CREATE TABLE IF NOT EXISTS public.med_interaction
(
    interaction_id integer NOT NULL DEFAULT nextval('med_interaction_interacton_id_seq'::regclass),
    med_id_1 integer NOT NULL,
    med_id_2 integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    severity text COLLATE pg_catalog."default",
    evidence_level text COLLATE pg_catalog."default",
    source_reference text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    is_active boolean DEFAULT true,
    interaction_type text COLLATE pg_catalog."default",
    CONSTRAINT med_interaction_pkey PRIMARY KEY (interaction_id)
);

CREATE TABLE IF NOT EXISTS public.med_order_history
(
    history_id serial NOT NULL,
    "time" timestamp without time zone NOT NULL,
    patient_id integer,
    description text COLLATE pg_catalog."default",
    medicines jsonb,
    doctor_id integer DEFAULT 10,
    dispense_doc_id integer DEFAULT 8,
    CONSTRAINT med_order_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.med_order_rights
(
    med_rights_id serial NOT NULL,
    doctor_rights boolean DEFAULT false,
    dentist_rights boolean DEFAULT false,
    phamarcist_rights boolean DEFAULT false,
    psychohiatrist_rights boolean DEFAULT false,
    CONSTRAINT med_order_rights_pkey PRIMARY KEY (med_rights_id)
);

CREATE TABLE IF NOT EXISTS public.med_problem
(
    mp_id integer NOT NULL DEFAULT nextval('med_probolem_mp_id_seq'::regclass),
    med_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    usage_id integer,
    problem_type text COLLATE pg_catalog."default",
    reported_by integer,
    reported_at timestamp without time zone DEFAULT now(),
    is_resolved boolean DEFAULT false,
    CONSTRAINT med_probolem_pkey PRIMARY KEY (mp_id)
);

CREATE TABLE IF NOT EXISTS public.med_requests
(
    request_id serial NOT NULL,
    med_id integer NOT NULL,
    quantity integer NOT NULL,
    unit text COLLATE pg_catalog."default" NOT NULL,
    requested_by integer NOT NULL,
    approved_by integer,
    status character varying(20) COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::character varying,
    request_time timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    approved_time timestamp without time zone,
    dispensed_time timestamp without time zone,
    note text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    is_approve boolean DEFAULT false,
    origin character varying(255) COLLATE pg_catalog."default",
    med_sid integer,
    CONSTRAINT med_requests_pkey PRIMARY KEY (request_id)
);

CREATE TABLE IF NOT EXISTS public.med_stock_history
(
    history_id serial NOT NULL,
    med_id integer,
    change_type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    quantity_change integer NOT NULL,
    balance_after integer NOT NULL,
    reference_id integer,
    "time" timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT med_stock_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.med_subwarehouse
(
    med_sid serial NOT NULL,
    med_id integer NOT NULL,
    med_quantity integer NOT NULL,
    packaging_type packaging_type NOT NULL,
    is_divisible boolean DEFAULT false,
    location character varying(50) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    med_showname character varying(50) COLLATE pg_catalog."default",
    min_quantity integer,
    max_quantity integer,
    cost_price numeric(10, 2),
    unit_price numeric(10, 2),
    med_showname_eng character varying(50) COLLATE pg_catalog."default",
    mfg_date date,
    exp_date date,
    is_expired boolean DEFAULT false,
    CONSTRAINT med_subwarehouse_pkey PRIMARY KEY (med_sid)
);

CREATE TABLE IF NOT EXISTS public.med_table
(
    med_id serial NOT NULL,
    med_name text COLLATE pg_catalog."default" NOT NULL,
    med_generic_name text COLLATE pg_catalog."default",
    med_severity text COLLATE pg_catalog."default" NOT NULL,
    med_counting_unit text COLLATE pg_catalog."default" NOT NULL,
    med_marketing_name text COLLATE pg_catalog."default" NOT NULL,
    med_thai_name text COLLATE pg_catalog."default",
    med_cost_price double precision NOT NULL,
    med_selling_price double precision NOT NULL,
    med_medium_price double precision NOT NULL,
    med_dosage_form text COLLATE pg_catalog."default",
    med_medical_category text COLLATE pg_catalog."default",
    med_essential_med_list "char",
    med_out_of_stock boolean NOT NULL DEFAULT false,
    med_replacement text COLLATE pg_catalog."default",
    "med_TMT_GP_name" text COLLATE pg_catalog."default",
    "med_TMT_TP_name" text COLLATE pg_catalog."default",
    med_dose_dialogue text COLLATE pg_catalog."default",
    "med_TMT_code" text COLLATE pg_catalog."default",
    "med_TPU_code" text COLLATE pg_catalog."default",
    med_pregnancy_cagetory "char",
    med_set_new_price boolean NOT NULL DEFAULT false,
    "mde_dispence_IPD_freq" integer,
    med_mfg date NOT NULL,
    med_exp date NOT NULL,
    CONSTRAINT med_table_pkey PRIMARY KEY (med_id)
);

CREATE TABLE IF NOT EXISTS public.med_usage
(
    usage_id serial NOT NULL,
    patient_id integer NOT NULL,
    med_id integer NOT NULL,
    order_datetime timestamp without time zone DEFAULT now(),
    start_datetime timestamp without time zone,
    end_datetime timestamp without time zone,
    dosage text COLLATE pg_catalog."default",
    frequency text COLLATE pg_catalog."default",
    route text COLLATE pg_catalog."default",
    usage_status text COLLATE pg_catalog."default" DEFAULT 'ongoing'::text,
    note text COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone DEFAULT now(),
    CONSTRAINT med_usage_pkey PRIMARY KEY (usage_id)
);

CREATE TABLE IF NOT EXISTS public.medicine_order
(
    order_id serial NOT NULL,
    med_id_list text COLLATE pg_catalog."default" NOT NULL,
    patient_id integer NOT NULL,
    doctor_name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    "time" timestamp without time zone,
    CONSTRAINT medicine_order_pkey PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS public."medicines_TEST"
(
    med_id integer NOT NULL DEFAULT nextval('medicines_med_id_seq'::regclass),
    med_name text COLLATE pg_catalog."default",
    med_generic_name text COLLATE pg_catalog."default",
    med_scientific_name text COLLATE pg_catalog."default",
    med_description text COLLATE pg_catalog."default",
    med_dosage text COLLATE pg_catalog."default",
    med_side_effect text COLLATE pg_catalog."default",
    med_interaction text COLLATE pg_catalog."default",
    med_price double precision,
    med_type text COLLATE pg_catalog."default",
    med_type_th text COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.noti_rules
(
    rule_id serial NOT NULL,
    rule_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    rule_type character varying(50) COLLATE pg_catalog."default",
    related_table jsonb NOT NULL,
    trigger_condition jsonb NOT NULL,
    template_title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    template_message text COLLATE pg_catalog."default" NOT NULL,
    recipient_role_id integer NOT NULL,
    check_frequency integer DEFAULT 60,
    is_active boolean DEFAULT true,
    last_checked_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT noti_rules_pkey PRIMARY KEY (rule_id)
);

CREATE TABLE IF NOT EXISTS public.notification_log
(
    log_id serial NOT NULL,
    rule_id integer NOT NULL,
    related_table text COLLATE pg_catalog."default" NOT NULL,
    related_id integer NOT NULL,
    sent_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notification_log_pkey PRIMARY KEY (log_id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notification_id serial NOT NULL,
    user_id integer NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default",
    related_table character varying(100) COLLATE pg_catalog."default",
    related_id integer,
    is_read boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone,
    CONSTRAINT notifications_pkey PRIMARY KEY (notification_id)
);

CREATE TABLE IF NOT EXISTS public.overdue_med
(
    overdue_id serial NOT NULL,
    med_id integer NOT NULL,
    dispense_status boolean NOT NULL DEFAULT false,
    patient_id integer,
    med_sid integer,
    "time" timestamp without time zone DEFAULT now(),
    doctor_id integer DEFAULT 8,
    quantity integer,
    CONSTRAINT overdue_med_pkey PRIMARY KEY (overdue_id)
);

CREATE TABLE IF NOT EXISTS public.patient
(
    patient_id integer NOT NULL,
    national_id text COLLATE pg_catalog."default" NOT NULL,
    first_name text COLLATE pg_catalog."default" NOT NULL,
    last_name text COLLATE pg_catalog."default" NOT NULL,
    gender text COLLATE pg_catalog."default" NOT NULL,
    birthday date NOT NULL,
    age_y integer NOT NULL DEFAULT 0,
    age_m integer NOT NULL DEFAULT 0,
    age_d integer NOT NULL DEFAULT 0,
    blood_group "char",
    "PMH" text COLLATE pg_catalog."default",
    phone text COLLATE pg_catalog."default",
    height double precision,
    weight double precision,
    bmi double precision,
    patient_addr_id integer,
    hn_number text COLLATE pg_catalog."default" NOT NULL,
    allergy_id integer,
    first_name_eng character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::character varying,
    last_name_eng character varying(100) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::character varying,
    CONSTRAINT patient_pkey PRIMARY KEY (patient_id),
    CONSTRAINT unique_hn_number UNIQUE (hn_number)
);

CREATE TABLE IF NOT EXISTS public.patient_address
(
    address_id serial NOT NULL,
    patient_addr_id integer NOT NULL,
    house_number text COLLATE pg_catalog."default" NOT NULL,
    village_number integer,
    sub_district text COLLATE pg_catalog."default" NOT NULL,
    district text COLLATE pg_catalog."default" NOT NULL,
    province text COLLATE pg_catalog."default" NOT NULL,
    road text COLLATE pg_catalog."default",
    postal_code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT addr_pk PRIMARY KEY (address_id)
        INCLUDE(address_id)
);

CREATE TABLE IF NOT EXISTS public.rad_registry
(
    rad_id integer NOT NULL DEFAULT nextval('rad_regisrty_rad_id_seq'::regclass),
    med_id integer NOT NULL,
    patient_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    acceptance boolean NOT NULL DEFAULT false,
    acceptance_time timestamp without time zone NOT NULL,
    specimen text COLLATE pg_catalog."default",
    pathogenic text COLLATE pg_catalog."default",
    indications text COLLATE pg_catalog."default",
    indications_criteria text COLLATE pg_catalog."default",
    submission_time timestamp without time zone,
    accept_by integer DEFAULT 10,
    CONSTRAINT rad_regisrty_pkey PRIMARY KEY (rad_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id integer NOT NULL DEFAULT 0,
    role_name text COLLATE pg_catalog."default" NOT NULL,
    role_name_th character varying(50) COLLATE pg_catalog."default",
    role_name_en character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT roles_pkey PRIMARY KEY (role_id)
);

CREATE TABLE IF NOT EXISTS public.sticker_form
(
    stk_id serial NOT NULL,
    fstk_form text COLLATE pg_catalog."default",
    CONSTRAINT sticker_form_pkey PRIMARY KEY (stk_id)
);

CREATE TABLE IF NOT EXISTS public.sub_warehouse
(
    sub_warehouse_id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    is_active boolean DEFAULT true,
    CONSTRAINT sub_warehouse_pkey PRIMARY KEY (sub_warehouse_id)
);

CREATE TABLE IF NOT EXISTS public.temp_humidity
(
    "time" timestamp without time zone NOT NULL,
    tempetature double precision NOT NULL,
    humidity double precision NOT NULL
);

CREATE TABLE IF NOT EXISTS public.users
(
    uid serial NOT NULL,
    username text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    phone text COLLATE pg_catalog."default" NOT NULL,
    role_id integer NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (uid)
);

ALTER TABLE IF EXISTS public.adr_registry
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.allergy_registry
    ADD CONSTRAINT fk_allergy_med FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_med_id
    ON public.allergy_registry(med_id);


ALTER TABLE IF EXISTS public.allergy_registry
    ADD CONSTRAINT fk_allergy_patient FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS fki_patient_id
    ON public.allergy_registry(patient_id);


ALTER TABLE IF EXISTS public.allergy_registry
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH FULL
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_med_id
    ON public.allergy_registry(med_id);


ALTER TABLE IF EXISTS public.error_medication
    ADD CONSTRAINT fk_error_medication FOREIGN KEY (med_sid)
    REFERENCES public.med_subwarehouse (med_sid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.med_delivery
    ADD CONSTRAINT fk_delivery_patient FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.med_evaluation
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.med_interaction
    ADD CONSTRAINT med_id_1 FOREIGN KEY (med_id_1)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_med_id_1
    ON public.med_interaction(med_id_1);


ALTER TABLE IF EXISTS public.med_interaction
    ADD CONSTRAINT med_id_2 FOREIGN KEY (med_id_2)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_med_id_2
    ON public.med_interaction(med_id_2);


ALTER TABLE IF EXISTS public.med_order_history
    ADD CONSTRAINT fk_patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.med_problem
    ADD CONSTRAINT fk_problem_med FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.med_problem
    ADD CONSTRAINT fk_problem_usage FOREIGN KEY (usage_id)
    REFERENCES public.med_usage (usage_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.med_problem
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.med_requests
    ADD CONSTRAINT fk_med_subwarehouse FOREIGN KEY (med_sid)
    REFERENCES public.med_subwarehouse (med_sid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.med_requests
    ADD CONSTRAINT med_requests_approved_by_fkey FOREIGN KEY (approved_by)
    REFERENCES public.users (uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.med_requests
    ADD CONSTRAINT med_requests_request_id_fkey FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.med_requests
    ADD CONSTRAINT med_requests_requested_by_fkey FOREIGN KEY (requested_by)
    REFERENCES public.users (uid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.med_stock_history
    ADD CONSTRAINT med_stock_history_med_id_fkey FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.med_subwarehouse
    ADD CONSTRAINT med_subwarehouse_med_id_fkey FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.medicine_order
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT fk_notifications_user FOREIGN KEY (user_id)
    REFERENCES public.users (uid) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.overdue_med
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.overdue_med
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient
    ADD CONSTRAINT fk_patient_address_id FOREIGN KEY (patient_addr_id)
    REFERENCES public.patient_address (address_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS fki_address_fk
    ON public.patient(patient_addr_id);


ALTER TABLE IF EXISTS public.rad_registry
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.rad_registry
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT role_fk FOREIGN KEY (role_id)
    REFERENCES public.roles (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_role_fk
    ON public.users(role_id);

END;