-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.adr_registry
(
    adr_id serial NOT NULL,
    med_id integer NOT NULL,
    patient_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    "time" timestamp without time zone NOT NULL,
    CONSTRAINT adr_registry_pkey PRIMARY KEY (adr_id)
);

CREATE TABLE IF NOT EXISTS public.allergy_registry
(
    allr_id serial NOT NULL,
    med_id integer NOT NULL,
    patient_id integer NOT NULL,
    symptoms text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT allergy_registry_pkey PRIMARY KEY (allr_id)
);

CREATE TABLE IF NOT EXISTS public.error_medication
(
    err_med_id serial NOT NULL,
    "time" timestamp without time zone NOT NULL,
    patient_id integer NOT NULL,
    doctor_name integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT error_medication_pkey PRIMARY KEY (err_med_id)
);

CREATE TABLE IF NOT EXISTS public.med_compatibility
(
    med_compat_id integer NOT NULL DEFAULT nextval('mde_compatibility_med_compat_id_seq'::regclass),
    med_interaction_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT mde_compatibility_pkey PRIMARY KEY (med_compat_id)
);

CREATE TABLE IF NOT EXISTS public.med_concominant
(
    med_conco_id serial NOT NULL,
    med_interaction_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT med_concominant_pkey PRIMARY KEY (med_conco_id)
);

CREATE TABLE IF NOT EXISTS public.med_cut_off_period
(
    med_period_id serial NOT NULL,
    period_day integer NOT NULL,
    period_month integer NOT NULL,
    period_time_h integer NOT NULL,
    period_time_m integer NOT NULL,
    sub_warehouse_id integer NOT NULL,
    CONSTRAINT med_cut_off_period_pkey PRIMARY KEY (med_period_id)
);

CREATE TABLE IF NOT EXISTS public.med_evaluation
(
    me_id serial NOT NULL,
    med_id integer NOT NULL,
    description text COLLATE pg_catalog."default",
    CONSTRAINT med_evaluation_pkey PRIMARY KEY (me_id)
);

CREATE TABLE IF NOT EXISTS public.med_interaction
(
    interacton_id serial NOT NULL,
    med_id_1 integer NOT NULL,
    med_id_2 integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT med_interaction_pkey PRIMARY KEY (interacton_id)
);

CREATE TABLE IF NOT EXISTS public.med_order_history
(
    history_id serial NOT NULL,
    "time" timestamp without time zone NOT NULL,
    med_order_id integer NOT NULL,
    CONSTRAINT med_order_history_pkey PRIMARY KEY (history_id)
);

CREATE TABLE IF NOT EXISTS public.med_order_rights
(
    med_rights_id serial NOT NULL,
    doctor_rights boolean DEFAULT false,
    dentist_rights boolean DEFAULT false,
    phamarcist_rights boolean DEFAULT false,
    psychohiatrist_rights boolean DEFAULT false,
    CONSTRAINT med_order_rights_pkey PRIMARY KEY (med_rights_id)
);

CREATE TABLE IF NOT EXISTS public.med_probolem
(
    mp_id serial NOT NULL,
    med_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT med_probolem_pkey PRIMARY KEY (mp_id)
);

CREATE TABLE IF NOT EXISTS public.med_table
(
    med_id serial NOT NULL,
    med_name text COLLATE pg_catalog."default" NOT NULL,
    med_generic_name text COLLATE pg_catalog."default",
    med_severity text COLLATE pg_catalog."default" NOT NULL,
    med_counting_unit text COLLATE pg_catalog."default" NOT NULL,
    med_marketing_name text COLLATE pg_catalog."default" NOT NULL,
    med_thai_name text COLLATE pg_catalog."default",
    med_cost_price double precision NOT NULL,
    med_selling_price double precision NOT NULL,
    med_medium_price double precision NOT NULL,
    med_dosage_form text COLLATE pg_catalog."default",
    med_medical_category text COLLATE pg_catalog."default",
    med_essential_med_list "char",
    med_out_of_stock boolean NOT NULL DEFAULT false,
    med_replacement text COLLATE pg_catalog."default",
    "med_TMT_GP_name" text COLLATE pg_catalog."default",
    "med_TMT_TP_name" text COLLATE pg_catalog."default",
    med_quantity integer,
    med_dose_dialogue text COLLATE pg_catalog."default",
    "med_TMT_code" text COLLATE pg_catalog."default",
    "med_TPU_code" text COLLATE pg_catalog."default",
    med_pregnancy_cagetory "char",
    med_set_new_price boolean NOT NULL DEFAULT false,
    "mde_dispence_IPD_freq" integer,
    med_mfg date NOT NULL,
    med_exp date NOT NULL,
    CONSTRAINT med_table_pkey PRIMARY KEY (med_id)
);

CREATE TABLE IF NOT EXISTS public.medicine_order
(
    order_id serial NOT NULL,
    med_id_list text COLLATE pg_catalog."default" NOT NULL,
    patient_id integer NOT NULL,
    doctor_name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    "time" timestamp without time zone,
    CONSTRAINT medicine_order_pkey PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS public."medicines_TEST"
(
    med_id integer NOT NULL DEFAULT nextval('medicines_med_id_seq'::regclass),
    med_name text COLLATE pg_catalog."default",
    med_generic_name text COLLATE pg_catalog."default",
    med_scientific_name text COLLATE pg_catalog."default",
    med_description text COLLATE pg_catalog."default",
    med_dosage text COLLATE pg_catalog."default",
    med_side_effect text COLLATE pg_catalog."default",
    med_interaction text COLLATE pg_catalog."default",
    med_price double precision,
    med_type text COLLATE pg_catalog."default",
    med_type_th text COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.overdue_med
(
    overdue_id serial NOT NULL,
    med_id integer NOT NULL,
    "time" date NOT NULL,
    dispende_status boolean NOT NULL DEFAULT false,
    patient_id integer,
    CONSTRAINT overdue_med_pkey PRIMARY KEY (overdue_id)
);

CREATE TABLE IF NOT EXISTS public.patient
(
    patient_id integer NOT NULL,
    national_id text COLLATE pg_catalog."default" NOT NULL,
    first_name text COLLATE pg_catalog."default" NOT NULL,
    last_name text COLLATE pg_catalog."default" NOT NULL,
    gender text COLLATE pg_catalog."default" NOT NULL,
    birthday date NOT NULL,
    age_y integer NOT NULL DEFAULT 0,
    age_m integer NOT NULL DEFAULT 0,
    age_d integer NOT NULL DEFAULT 0,
    blood_group "char",
    allergy_id integer,
    "PMH" text COLLATE pg_catalog."default",
    phone text COLLATE pg_catalog."default",
    height double precision,
    weight double precision,
    bmi double precision,
    address_id integer,
    CONSTRAINT patient_pkey PRIMARY KEY (patient_id)
);

CREATE TABLE IF NOT EXISTS public.patient_address
(
    address_id serial NOT NULL,
    patient_addr_id integer NOT NULL,
    house_number text COLLATE pg_catalog."default" NOT NULL,
    village_number integer,
    sub_district text COLLATE pg_catalog."default" NOT NULL,
    district text COLLATE pg_catalog."default" NOT NULL,
    province text COLLATE pg_catalog."default" NOT NULL,
    road text COLLATE pg_catalog."default",
    CONSTRAINT patient_address_pkey PRIMARY KEY (address_id)
);

CREATE TABLE IF NOT EXISTS public.rad_regisrty
(
    rad_id serial NOT NULL,
    med_id integer NOT NULL,
    patient_id integer NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    acceptance boolean NOT NULL DEFAULT false,
    acceptance_time timestamp without time zone NOT NULL,
    specimen text COLLATE pg_catalog."default",
    pathogenic text COLLATE pg_catalog."default",
    indications text COLLATE pg_catalog."default",
    indications_criteria text COLLATE pg_catalog."default",
    CONSTRAINT rad_regisrty_pkey PRIMARY KEY (rad_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    "roleID" integer NOT NULL DEFAULT 0,
    role_name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY ("roleID")
);

CREATE TABLE IF NOT EXISTS public.sticker_form
(
    stk_id serial NOT NULL,
    fstk_form text COLLATE pg_catalog."default",
    CONSTRAINT sticker_form_pkey PRIMARY KEY (stk_id)
);

CREATE TABLE IF NOT EXISTS public.sub_warehouse
(
    sw_id serial NOT NULL,
    med_id integer NOT NULL,
    quantity integer NOT NULL,
    CONSTRAINT sub_warehouse_pkey PRIMARY KEY (sw_id)
);

CREATE TABLE IF NOT EXISTS public.temp_humidity
(
    "time" timestamp without time zone NOT NULL,
    tempetature double precision NOT NULL,
    humidity double precision NOT NULL
);

CREATE TABLE IF NOT EXISTS public.users
(
    uid serial NOT NULL,
    username text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    phone text COLLATE pg_catalog."default" NOT NULL,
    "roleID" integer NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (uid)
);

ALTER TABLE IF EXISTS public.adr_registry
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.allergy_registry
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH FULL
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_med_id
    ON public.allergy_registry(med_id);


ALTER TABLE IF EXISTS public.allergy_registry
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_patient_id
    ON public.allergy_registry(patient_id);


ALTER TABLE IF EXISTS public.error_medication
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.med_compatibility
    ADD CONSTRAINT med_interaction_id FOREIGN KEY (med_interaction_id)
    REFERENCES public.med_interaction (interacton_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_med_interaction_id
    ON public.med_compatibility(med_interaction_id);


ALTER TABLE IF EXISTS public.med_concominant
    ADD CONSTRAINT med_interaction_id FOREIGN KEY (med_interaction_id)
    REFERENCES public.med_interaction (interacton_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.med_cut_off_period
    ADD CONSTRAINT sub_warehouse_id FOREIGN KEY (sub_warehouse_id)
    REFERENCES public.sub_warehouse (sw_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_sub_warehouse_id
    ON public.med_cut_off_period(sub_warehouse_id);


ALTER TABLE IF EXISTS public.med_evaluation
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.med_interaction
    ADD CONSTRAINT med_id_1 FOREIGN KEY (med_id_1)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_med_id_1
    ON public.med_interaction(med_id_1);


ALTER TABLE IF EXISTS public.med_interaction
    ADD CONSTRAINT med_id_2 FOREIGN KEY (med_id_2)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_med_id_2
    ON public.med_interaction(med_id_2);


ALTER TABLE IF EXISTS public.med_order_history
    ADD CONSTRAINT med_order_id FOREIGN KEY (med_order_id)
    REFERENCES public.medicine_order (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_med_order_id
    ON public.med_order_history(med_order_id);


ALTER TABLE IF EXISTS public.med_probolem
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.medicine_order
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.overdue_med
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.overdue_med
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient
    ADD CONSTRAINT address_id FOREIGN KEY (address_id)
    REFERENCES public.patient_address (address_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_address_id
    ON public.patient(address_id);


ALTER TABLE IF EXISTS public.patient
    ADD CONSTRAINT allergy_id FOREIGN KEY (allergy_id)
    REFERENCES public.allergy_registry (allr_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_allergy_id
    ON public.patient(allergy_id);


ALTER TABLE IF EXISTS public.patient_address
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_addr_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.rad_regisrty
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.rad_regisrty
    ADD CONSTRAINT patient_id FOREIGN KEY (patient_id)
    REFERENCES public.patient (patient_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.sub_warehouse
    ADD CONSTRAINT med_id FOREIGN KEY (med_id)
    REFERENCES public.med_table (med_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_e
    ON public.sub_warehouse(med_id);


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT role_fk FOREIGN KEY ("roleID")
    REFERENCES public.roles ("roleID") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_role_fk
    ON public.users("roleID");

END;